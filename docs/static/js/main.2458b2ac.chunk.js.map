{"version":3,"sources":["components/AddCategory.jsx","components/GifGridItem.jsx","helpers/getGifs.js","components/GifGrid.jsx","hooks/useFetchGifs.js","GifExpertApp.jsx","index.js"],"names":["AddCategory","props","useState","textValue","setTextValue","onSubmit","e","preventDefault","handleSubmit","console","log","type","value","onChange","target","GifGridItem","title","url","id","className","src","alt","apiKey","process","getGifs","category","a","limitImages","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_large","GifGrid","loading","state","setState","useEffect","setTimeout","then","imgs","useFetchGifs","GifExpertApp","categories","setCategories","newEl","includes","prev","require","config","ReactDOM","render","document","getElementById"],"mappings":"kMAiCeA,EA9BK,SAACC,GAEnB,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KAYA,OACE,sBAAMC,SAXa,SAACC,GACpBA,EAAEC,iBACEJ,IAGJF,EAAMO,aAAaL,GACnBC,EAAa,IACbK,QAAQC,IAAI,mBAIZ,SACE,uBACEC,KAAK,OACLC,MAAOT,EACPU,SAAU,SAACP,GAAD,OAAKF,EAAaE,EAAEQ,OAAOF,a,QCpBhCG,EAAc,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,IAAa,EAARC,GACvC,OACE,sBAAKC,UAAU,yCAAf,UACE,qBAAKC,IAAKH,EAAKI,IAAKL,IACpB,4BAAIA,Q,uBCLJM,EAASC,mCAEFC,EAAO,uCAAG,WAAMC,GAAN,qCAAAC,EAAA,6DAAgBC,EAAhB,+BAA8B,EAE7CV,EAFe,iDAEiCW,UAAUH,GAF3C,kBAE8DE,EAF9D,oBAEqFL,GAFrF,SAGFO,MAAMZ,GAHJ,cAGfa,EAHe,gBAIAA,EAAKC,OAJL,uBAIdC,EAJc,EAIdA,KACDC,EAAOD,EAAKE,KAAI,SAACC,GAAQ,IAAD,EAC5B,MAAO,CACL,GAAMA,EAAIjB,GACV,cAAOiB,EAAIC,cAAX,aAAO,EAAYC,gBAAgBpB,IACnC,MAASkB,EAAInB,UATI,kBAYdiB,GAZc,4CAAH,sDCwBLK,EArBC,SAAC,GAAgB,IAAfb,EAAc,EAAdA,SAEhB,ECJ0B,SAAC,GAAgB,IAAfA,EAAc,EAAdA,SAC5B,EAA0BvB,mBAAS,CACjC8B,KAAM,GACNO,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAcA,OATAC,qBAAU,WACRC,YAAW,WACTnB,EAAQC,GAAUmB,MAAK,SAACC,GAAD,OAAUJ,EAAS,CACxCT,KAAMa,EACNN,SAAS,SAEV,OACH,CAACd,IAEIe,EDXwBM,CAAa,CAACrB,aAAjCW,EAAZ,EAAOJ,KAAaO,EAApB,EAAoBA,QAEpB,OACE,qCACE,6BAAKd,IACJc,GAAW,cACZ,qBAAKpB,UAAU,YAAf,SAEIiB,EAAOF,KAAI,SAACC,GAAD,OAAO,cAAC,EAAD,eAA8BA,GAAZA,EAAIjB,aEZrC6B,EAAe,WAC1B,MAAoC7C,mBAAS,CAAC,SAA9C,mBAAO8C,EAAP,KAAmBC,EAAnB,KAWA,OAAQ,qCACN,8CACA,cAAC,EAAD,CAAazC,aAXG,SAAC0C,GACdF,EAAWG,SAASD,IAGvBD,GAAc,SAACG,GACb,MAAM,CAAEF,GAAR,mBAAkBE,UAOpB,uBAEEJ,EAAWd,KAAI,SAACT,GAAD,OAAc,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,U,MCpBjD4B,EAAQ,IAAUC,SAOlBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.2458b2ac.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst AddCategory = (props) => {\r\n\r\n  const [textValue, setTextValue] = useState('');\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if(!textValue){\r\n      return;\r\n    }\r\n    props.handleSubmit(textValue);\r\n    setTextValue('');\r\n    console.log('Submit done!!');\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input \r\n        type=\"text\"\r\n        value={textValue}\r\n        onChange={(e)=>setTextValue(e.target.value)}\r\n      />\r\n    </form>\r\n  )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n  'textValue': PropTypes.string,\r\n  'handleSubmit': PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ({title, url, id}) => {\r\n  return (\r\n    <div className='card animate__animated animate__fadeIn'>\r\n      <img src={url} alt={title} />\r\n      <p>{title}</p>\r\n    </div>\r\n  )\r\n}\r\n","\r\nconst apiKey = process.env.REACT_APP_GIPHY_KEY;\r\n\r\nexport const getGifs = async(category, limitImages = 5) => {\r\n\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=${limitImages}&api_key=${apiKey}`;\r\n  const resp = await fetch(url);\r\n  const {data} = await resp.json();\r\n  const gifs = data.map((img)=> {\r\n    return {\r\n      'id': img.id,\r\n      'url': img.images?.downsized_large.url,\r\n      'title': img.title,\r\n    };\r\n  }); \r\n  return gifs;\r\n};","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { GifGridItem } from './GifGridItem';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n\r\n\r\nconst GifGrid = ({category}) => {\r\n\r\n  const {data:images, loading} = useFetchGifs({category});\r\n\r\n  return (\r\n    <>\r\n      <h3>{category}</h3>\r\n      {loading && 'Cargando...'}\r\n      <div className='card-grid'>\r\n        {\r\n          images.map((img)=><GifGridItem key={img.id} {...img}/>)\r\n        }\r\n      </div>\r\n    </>\r\n  )\r\n};\r\n\r\nGifGrid.propTypes = {\r\n  'category': PropTypes.string.isRequired,\r\n};\r\n\r\nexport default GifGrid;\r\n","import { useEffect } from \"react\";\r\nimport { useState } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = ({category}) => {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true,\r\n  })\r\n\r\n  useEffect(()=>{\r\n    setTimeout(() => {\r\n      getGifs(category).then((imgs) => setState({\r\n        data: imgs,\r\n        loading: false,\r\n      }));\r\n    }, 500);\r\n  },[category]);\r\n\r\n  return state;\r\n};","import { useState } from \"react\"\r\nimport AddCategory from \"./components/AddCategory\";\r\nimport GifGrid from \"./components/GifGrid\";\r\n\r\nexport const GifExpertApp = () => {\r\n  const [categories, setCategories] = useState(['test']);\r\n\r\n  const handleAdd = (newEl) => {\r\n    if(categories.includes(newEl)){\r\n      return;\r\n    }\r\n    setCategories((prev) => {\r\n      return [newEl, ...prev];\r\n    });\r\n  };\r\n\r\n  return (<>\r\n    <h1>GifExpertApp</h1>\r\n    <AddCategory handleSubmit={handleAdd}/>\r\n    <hr />\r\n    {\r\n      categories.map((category )=> <GifGrid key={category} category={category} />)\r\n    }\r\n\r\n  </>)\r\n}","/* eslint-disable import/first */\nrequire('dotenv').config();\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {GifExpertApp} from './GifExpertApp'\n\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}